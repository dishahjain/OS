#include <stdio.h>
#define MAX 25

void firstFit(int b[], int nb, int f[], int nf);
void worstFit(int b[], int nb, int f[], int nf);
void bestFit(int b[], int nb, int f[], int nf);

int main() {
    int b[MAX], f[MAX], nb, nf;

    printf("Memory Management Schemes\n");

    printf("\nEnter the number of blocks: ");
    scanf("%d", &nb);

    printf("Enter the number of files: ");
    scanf("%d", &nf);

    printf("\nEnter the size of the blocks:\n");
    for (int i = 0; i < nb; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &b[i]);
    }

    printf("\nEnter the size of the files:\n");
    for (int i = 0; i < nf; i++) {
        printf("File %d: ", i + 1);
        scanf("%d", &f[i]);
    }

    printf("\nMemory Management Scheme - First Fit");
    firstFit(b, nb, f, nf);

    printf("\n\nMemory Management Scheme - Worst Fit");
    worstFit(b, nb, f, nf);

    printf("\n\nMemory Management Scheme - Best Fit");
    bestFit(b, nb, f, nf);

    return 0;
}

void firstFit(int b[], int nb, int f[], int nf) {
    int bf[MAX] = {0};
    int ff[MAX];
    int frag[MAX];

    for (int i = 0; i < nf; i++) {
        ff[i] = -1;
        for (int j = 0; j < nb; j++) {
            if (!bf[j] && b[j] >= f[i]) {
                ff[i] = j;
                bf[j] = 1;
                frag[i] = b[j] - f[i];
                break;
            }
        }
    }

    printf("\nFile_no\tFile_size\tBlock_no\tBlock_size\tFragment");
    for (int i = 0; i < nf; i++) {
        if (ff[i] != -1)
            printf("\n%d\t%d\t\t%d\t\t%d\t\t%d", i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
        else
            printf("\n%d\t%d\t\tNot Allocated", i + 1, f[i]);
    }
}

void worstFit(int b[], int nb, int f[], int nf) {
    int bf[MAX] = {0};
    int ff[MAX];
    int frag[MAX];

    for (int i = 0; i < nf; i++) {
        ff[i] = -1;
        int worstIdx = -1;
        for (int j = 0; j < nb; j++) {
            if (!bf[j] && b[j] >= f[i]) {
                if (worstIdx == -1 || b[j] > b[worstIdx])
                    worstIdx = j;
            }
        }
        if (worstIdx != -1) {
            ff[i] = worstIdx;
            bf[worstIdx] = 1;
            frag[i] = b[worstIdx] - f[i];
        }
    }

    printf("\nFile_no\tFile_size\tBlock_no\tBlock_size\tFragment");
    for (int i = 0; i < nf; i++) {
        if (ff[i] != -1)
            printf("\n%d\t%d\t\t%d\t\t%d\t\t%d", i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
        else
            printf("\n%d\t%d\t\tNot Allocated", i + 1, f[i]);
    }
}

void bestFit(int b[], int nb, int f[], int nf) {
    int bf[MAX] = {0};
    int ff[MAX];
    int frag[MAX];

    for (int i = 0; i < nf; i++) {
        ff[i] = -1;
        int bestIdx = -1;
        for (int j = 0; j < nb; j++) {
            if (!bf[j] && b[j] >= f[i]) {
                if (bestIdx == -1 || b[j] < b[bestIdx])
                    bestIdx = j;
            }
        }
        if (bestIdx != -1) {
            ff[i] = bestIdx;
            bf[bestIdx] = 1;
            frag[i] = b[bestIdx] - f[i];
        }
    }

    printf("\nFile_no\tFile_size\tBlock_no\tBlock_size\tFragment");
    for (int i = 0; i < nf; i++) {
        if (ff[i] != -1)
            printf("\n%d\t%d\t\t%d\t\t%d\t\t%d", i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
        else
            printf("\n%d\t%d\t\tNot Allocated", i + 1, f[i]);
    }
}
